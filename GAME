<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>THE KEMAN2</title>
  <style>
    body {margin:0;overflow:hidden;background:#181A1B;}
    canvas {display:block;margin:0 auto;background:linear-gradient(#232942 70%,#181A1B 100%);}
    #menu, #shop {
      position: absolute; left: 0; top: 0; width: 100%; height: 100%;
      display: flex; align-items: center; justify-content: center; flex-direction: column;
      font-family: 'Segoe UI', Arial, sans-serif; background:rgba(0,0,0,0.7); z-index: 10;
      transition: opacity 0.8s cubic-bezier(.66,.04,.3,1.03);
    }
    #menu.hide, #shop.hide { opacity: 0; pointer-events: none; }
    #menu h1 {
      color: #5ec6ff; font-size: 3em; text-shadow: 0 0 10px #5ec6ff80, 0 2px 8px #232942;
      letter-spacing: 2px; margin-bottom: 40px;
    }
    #menu button, #shop button, .return-btn {
      padding: 16px 60px; font-size: 1.5em; color: #fff; background: linear-gradient(90deg,#009ffd,#2a2a72);
      border:none; border-radius:16px; cursor:pointer; box-shadow:0 0 20px #009ffd77;
      transition: background 0.3s, transform 0.2s;
      margin: 10px;
    }
    #menu button:hover, #shop button:hover, .return-btn:hover { background: linear-gradient(90deg,#2a2a72,#009ffd); transform:scale(1.08); }
    #shop {
      justify-content: flex-start; padding-top: 60px;
    }
    #shop h2 { color: #ffd700; margin-bottom: 32px; text-shadow:0 2px 7px #232942;}
    .shop-item {
      background:linear-gradient(90deg,#232942,#009ffd55);
      color:#fff;padding:18px 28px;margin-bottom:18px;border-radius:14px;
      box-shadow:0 0 12px #009ffd44;display:flex;align-items:center;justify-content:space-between;
      width:380px;font-size:1.25em;
    }
    .shop-item button {
      background: #ffd700; color: #232942; border: none; border-radius: 8px; padding: 7px 18px;
      font-size:1em;cursor:pointer;box-shadow:0 0 8px #ffd70099;
    }
    .shop-item button:disabled {opacity:0.6;cursor:not-allowed;}
    #hud {
      position: absolute; left: 25px; top: 22px; color: #fff; font-size: 1.25em;
      font-family: 'Segoe UI', Arial, sans-serif; z-index: 5; text-shadow: 0 2px 5px #0005;
      background:rgba(0,0,0,0.19);padding:10px 28px;border-radius:18px;
      box-shadow:0 0 16px #009ffd22; display: flex; align-items: center;
    }
    #shop-coin {
      color: #ffd700; font-size: 1.35em; font-weight: bold; margin-bottom: 18px;
      text-shadow: 0 1px 8px #232942;
    }
    .return-btn {
      font-size: 1.1em;
      padding: 10px 38px;
      margin-left: 32px;
      background: #ffd700; color: #232942;
      border:none; border-radius:8px; cursor:pointer; box-shadow:0 0 8px #ffd70099;
    }
    .return-btn:active { background: #ffeb3b; }
    #gameover-menu {
      position: absolute; left: 0; top: 0; width: 100%; height: 100%;
      display: flex; align-items: center; justify-content: center; flex-direction: column;
      font-family: 'Segoe UI', Arial, sans-serif; background:rgba(0,0,0,0.7); z-index: 20;
      transition: opacity 0.8s cubic-bezier(.66,.04,.3,1.03);
    }
    #gameover-menu.hide { opacity: 0; pointer-events: none; }
    #gameover-menu h1 {
      color: #f22; font-size: 3em; text-shadow: 0 0 10px #fff, 0 2px 8px #232942;
      letter-spacing: 2px; margin-bottom: 30px;
    }
    #gameover-menu span {
      color: #ffd700; font-size: 1.5em; margin-bottom: 18px;
      text-shadow: 0 1px 8px #232942;
    }
  </style>
</head>
<body>
  <div id="menu">
    <h1>THE KEMAN2</h1>
    <button onclick="startGame()">JUGAR</button>
    <button onclick="showShop()">TIENDA</button>
  </div>
  <div id="shop" class="hide">
    <h2>Tienda de Mejoras</h2>
    <div id="shop-coin"></div>
    <div class="shop-item">
      <span>Mejorar velocidad (+2)</span>
      <button id="shop-speed">Comprar 30⦁</button>
    </div>
    <div class="shop-item">
      <span>Mejorar disparo (+1)</span>
      <button id="shop-fire">Comprar 40⦁</button>
    </div>
    <div class="shop-item">
      <span>Recuperar vida (+20)</span>
      <button id="shop-health">Comprar 20⦁</button>
    </div>
    <button onclick="hideShop()">VOLVER</button>
  </div>
  <div id="hud" style="display:none;">
    <span id="hud-score">Puntos: 0</span> |
    <span id="hud-health">Vida: 100</span> |
    <span id="hud-coins">⦁ 0</span>
    <button onclick="showShop()" style="margin-left:32px;background:#ffd700;color:#232942;border:none;border-radius:8px;padding:7px 18px;font-size:1em;cursor:pointer;box-shadow:0 0 8px #ffd70099;">Tienda</button>
    <button class="return-btn" onclick="returnToMenu()">Volver al menú</button>
  </div>
  <div id="gameover-menu" class="hide">
    <h1>THE KEMAN2 - ¡Game Over!</h1>
    <span id="gameover-info"></span>
    <button onclick="returnToMenu()" class="return-btn">Volver al menú</button>
    <button onclick="startGame()">Jugar de nuevo</button>
  </div>
  <canvas id="game" width="900" height="540"></canvas>
  <script>
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    // --- Estado del juego ---
    let playing = false, score = 0, coins = 0, playerHealth = 100;
    // --- Nave del jugador ---
    let player = {x:450,y:480,w:56,h:64,speed:6,fireRate:22,fireLevel:1,fireTick:0,alive:true};
    // --- Proyectiles ---
    let shots = [];
    // --- Enemigos ---
    let enemies = [];
    let enemyTick = 0;
    // --- Proyectiles enemigos ---
    let enemyShots = [];
    // --- Partículas ---
    let particles = [];
    // --- Tienda ---
    function updateShopUI() {
      document.getElementById('shop-coin').textContent = 'Tus monedas: ' + coins + '⦁';
      document.getElementById('shop-speed').disabled = coins < 30;
      document.getElementById('shop-fire').disabled = coins < 40;
      document.getElementById('shop-health').disabled = coins < 20 || playerHealth>=100;
    }
    document.getElementById('shop-speed').onclick = function() {
      if(coins>=30){coins-=30;player.speed+=2;updateShopUI();}
    }
    document.getElementById('shop-fire').onclick = function() {
      if(coins>=40){coins-=40;player.fireLevel+=1;updateShopUI();}
    }
    document.getElementById('shop-health').onclick = function() {
      if(coins>=20&&playerHealth<100){coins-=20;playerHealth=Math.min(100,playerHealth+20);updateShopUI();}
    }
    function showShop() {
      updateShopUI();
      document.getElementById('shop').classList.remove('hide');
      document.getElementById('menu').classList.add('hide');
      document.getElementById('hud').style.display='none';
      document.getElementById('gameover-menu').classList.add('hide');
      playing=false;
    }
    function hideShop() {
      document.getElementById('shop').classList.add('hide');
      document.getElementById('menu').classList.remove('hide');
    }
    // --- Volver al menú ---
    function returnToMenu(){
      playing = false;
      document.getElementById('menu').classList.remove('hide');
      document.getElementById('hud').style.display='none';
      document.getElementById('gameover-menu').classList.add('hide');
      // Limpieza visual
      ctx.clearRect(0,0,900,540);
    }
    // --- Controles ---
    const keys={};
    window.addEventListener('keydown',e=>keys[e.code]=true);
    window.addEventListener('keyup',e=>keys[e.code]=false);

    // --- Partículas visuales ---
    function spawnParticles(x,y,color) {
      for(let i=0;i<14;i++)particles.push({
        x:x,y:y,r:Math.random()*8+4,dx:(Math.random()-0.5)*10,dy:(Math.random()-0.5)*10,life:32,color:color
      });
    }
    function drawParticles() {
      for(let i=particles.length-1;i>=0;i--) {
        let p = particles[i];
        ctx.globalAlpha = p.life/32;
        ctx.beginPath();
        ctx.arc(p.x,p.y,p.r,0,2*Math.PI);
        ctx.fillStyle = p.color;
        ctx.fill();
        p.x += p.dx; p.y += p.dy; p.dy += 0.5; p.life--;
        if(p.life<=0)particles.splice(i,1);
      }
      ctx.globalAlpha = 1;
    }
    // --- Fondo con luces ---
    function drawLighting() {
      ctx.save();
      ctx.globalAlpha = 0.3;
      let grad = ctx.createRadialGradient(450,270,60,450,270,370);
      grad.addColorStop(0, "#fff7");
      grad.addColorStop(0.2,"#5ec6ff33");
      grad.addColorStop(1, "#181A1B");
      ctx.fillStyle = grad;
      ctx.fillRect(0,0,900,540);
      ctx.restore();
    }
    // --- Loop principal ---
    function gameLoop() {
      if(!playing) return;
      ctx.clearRect(0,0,900,540);
      // Fondo animado
      for(let i=0;i<3;i++) {
        ctx.save();
        ctx.globalAlpha=0.06+i*0.08;
        ctx.fillStyle=['#5ec6ff','#009ffd','#2a2a72'][i];
        ctx.beginPath();
        ctx.arc(450,270,200+i*45+Math.sin(Date.now()/700+i*2)*12,0,2*Math.PI);
        ctx.fill();
        ctx.restore();
      }
      drawLighting();

      // --- Dibujar nave del jugador ---
      if(player.alive) drawPlayer();

      // --- Dibujar disparos del jugador ---
      for(let s of shots){
        ctx.save();
        ctx.shadowBlur=8;ctx.shadowColor="#ffd700";
        ctx.fillStyle="#ffd700";
        ctx.fillRect(s.x-4,s.y-12,8,28);
        ctx.restore();
      }

      // --- Dibujar enemigos ---
      for(let e of enemies) drawEnemy(e);

      // --- Dibujar disparos enemigos ---
      for(let es of enemyShots){
        ctx.save();
        ctx.shadowBlur=8;ctx.shadowColor="#f22";
        ctx.fillStyle="#f22";
        ctx.fillRect(es.x-3,es.y-10,6,20);
        ctx.restore();
      }

      // --- Partículas ---
      drawParticles();

      // --- Movimiento jugador ---
      if(player.alive){
        if(keys["ArrowLeft"]||keys["KeyA"]) player.x-=player.speed;
        if(keys["ArrowRight"]||keys["KeyD"]) player.x+=player.speed;
        if(keys["ArrowUp"]||keys["KeyW"]) player.y-=player.speed;
        if(keys["ArrowDown"]||keys["KeyS"]) player.y+=player.speed;
        player.x = Math.max(0,Math.min(900-player.w,player.x));
        player.y = Math.max(0,Math.min(540-player.h,player.y));
      }

      // --- Disparo jugador (automático) ---
      if(player.alive && player.fireTick<=0){
        for(let i=0;i<player.fireLevel;i++){
          let ang = (i-(player.fireLevel-1)/2)*0.15;
          shots.push({x:player.x+player.w/2+Math.sin(ang)*12,y:player.y-8,dy:-14+ang*10});
        }
        player.fireTick = player.fireRate;
      }
      player.fireTick--;

      // --- Movimiento disparos jugador ---
      for(let i=shots.length-1;i>=0;i--){
        shots[i].y+=shots[i].dy;
        if(shots[i].y<-30)shots.splice(i,1);
      }

      // --- Enemigos spawn ---
      enemyTick--;
      if(enemyTick<=0){
        enemies.push({
          x:Math.random()*820+40,y:-60,w:48,h:52,health:30+score/4,speed:2+Math.random()*2,type:Math.random()>0.5?1:2,alive:true,fireTick:30+Math.random()*40
        });
        enemyTick = 60+Math.random()*50;
      }
      // --- Movimiento enemigos ---
      for(let i=enemies.length-1;i>=0;i--){
        let e=enemies[i];
        e.y+=e.speed;
        if(e.type==2) e.x+=Math.sin(Date.now()/350+e.y/60)*2;
        if(e.y>540) enemies.splice(i,1);
        // Disparos enemigos
        e.fireTick--;
        if(e.fireTick<=0 && e.alive){
          enemyShots.push({x:e.x+e.w/2,y:e.y+e.h,dy:8});
          e.fireTick=50+Math.random()*40;
        }
      }
      // --- Movimiento disparos enemigos ---
      for(let i=enemyShots.length-1;i>=0;i--){
        enemyShots[i].y+=enemyShots[i].dy;
        if(enemyShots[i].y>560)enemyShots.splice(i,1);
      }

      // --- Colisión disparos jugador-enemigos ---
      for(let i=enemies.length-1;i>=0;i--){
        let e=enemies[i];
        for(let j=shots.length-1;j>=0;j--){
          let s=shots[j];
          if(e.alive && s.x>e.x&&s.x<e.x+e.w&&s.y>e.y&&s.y<e.y+e.h){
            e.health-=8+player.fireLevel*2;
            spawnParticles(s.x,s.y,"#ffd700");
            shots.splice(j,1);
            if(e.health<=0){
              e.alive=false;
              score+=10;
              coins+=10;
              spawnParticles(e.x+e.w/2,e.y+e.h/2,"#5ec6ff");
              enemies.splice(i,1);
              break;
            }
          }
        }
      }

      // --- Colisión disparos enemigos-jugador ---
      for(let i=enemyShots.length-1;i>=0;i--){
        let es=enemyShots[i];
        if(player.alive && es.x>player.x&&es.x<player.x+player.w&&es.y>player.y&&es.y<player.y+player.h){
          playerHealth-=14;
          spawnParticles(es.x,es.y,"#f22");
          enemyShots.splice(i,1);
          if(playerHealth<=0){
            player.alive=false;
            spawnParticles(player.x+player.w/2,player.y+player.h/2,"#f22");
            showGameOver();
            break;
          }
        }
      }

      // --- HUD ---
      document.getElementById('hud-score').textContent='Puntos: '+score;
      document.getElementById('hud-health').textContent='Vida: '+playerHealth;
      document.getElementById('hud-coins').textContent='⦁ '+coins;

      // --- Siguiente frame ---
      if(playing) requestAnimationFrame(gameLoop);
    }

    function drawPlayer(){
      ctx.save();
      ctx.translate(player.x+player.w/2,player.y+player.h/2);
      // Cuerpo nave
      ctx.beginPath();
      ctx.ellipse(0,10,22,32,0,0,2*Math.PI);
      ctx.fillStyle="#5ec6ff";
      ctx.shadowBlur=16;ctx.shadowColor="#009ffd";
      ctx.fill();
      // Cabina
      ctx.beginPath();
      ctx.arc(0,-10,14,0,2*Math.PI);
      ctx.fillStyle="#fff";
      ctx.shadowBlur=8;ctx.shadowColor="#ffd700";
      ctx.fill();
      // Alas
      ctx.beginPath();
      ctx.moveTo(-22,10);ctx.lineTo(-32,22);ctx.lineTo(-8,20);ctx.fillStyle="#009ffd";ctx.fill();
      ctx.beginPath();
      ctx.moveTo(22,10);ctx.lineTo(32,22);ctx.lineTo(8,20);ctx.fillStyle="#009ffd";ctx.fill();
      ctx.restore();
    }
    function drawEnemy(e){
      ctx.save();
      ctx.translate(e.x+e.w/2,e.y+e.h/2);
      // Cuerpo
      ctx.beginPath();
      ctx.ellipse(0,10,18,24,0,0,2*Math.PI);
      ctx.fillStyle=e.type==1?"#f22":"#ffd700";
      ctx.shadowBlur=14;ctx.shadowColor=e.type==1?"#fff":"#232942";
      ctx.fill();
      // Cabina
      ctx.beginPath();
      ctx.arc(0,-10,9,0,2*Math.PI);
      ctx.fillStyle="#232942";
      ctx.shadowBlur=5;ctx.shadowColor="#fff";
      ctx.fill();
      // Alas
      ctx.beginPath();
      ctx.moveTo(-18,8);ctx.lineTo(-28,16);ctx.lineTo(-7,14);ctx.fillStyle="#fff";ctx.fill();
      ctx.beginPath();
      ctx.moveTo(18,8);ctx.lineTo(28,16);ctx.lineTo(7,14);ctx.fillStyle="#fff";ctx.fill();
      ctx.restore();
    }

    // --- Menú y arranque ---
    function startGame(){
      document.getElementById('menu').classList.add('hide');
      document.getElementById('hud').style.display = '';
      document.getElementById('gameover-menu').classList.add('hide');
      setTimeout(()=>{
        playing=true;
        score=0;coins=0;playerHealth=100;
        player.x=450;player.y=480;player.alive=true;player.fireLevel=1;player.speed=6;shots=[];
        enemies=[];enemyShots=[];particles=[];
        gameLoop();
      },700);
    }
    // --- Game Over ---
    function showGameOver(){
      playing=false;
      document.getElementById('hud').style.display='none';
      document.getElementById('gameover-menu').classList.remove('hide');
      document.getElementById('gameover-info').textContent = `Puntaje: ${score} | Monedas: ${coins}`;
    }
  </script>
</body>
</html>
